scalar DateTime
scalar Upload

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  avatarUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Comment {
  id: ID!
  userId: ID
  movieId: ID!
  content: String!
  parentId: ID
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type RecursiveComment {
  id: ID!
  userId: ID
  movieId: ID!
  content: String!
  parentId: ID
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  user: User
  totalComments: Int!
  depth: Int!
  voteRatio: Int!
  hasUpvoted: Boolean!
  hasDownvoted: Boolean!
}

type CommentVote {
  userId: ID!
  commentId: ID!
  type: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Creator {
  name: String!
  id: String!
}

type Genre {
  name: String!
  id: String!
}

type Star {
  name: String!
  id: String!
}

type Movie {
  id: ID!
  title: String!
  plot: String
  runtime: Int
  yearReleased: Int
  releasedAt: DateTime
  certificate: String
  externalRating: Float
  externalMovieMeterRank: Int
  externalVotes: Int
  posterUrl: String
  posterHeight: Int
  posterWidth: Int
  landscapePosterUrl: String
  landscapePosterHeight: Int
  landscapePosterWidth: Int
  showcaseOnHomePage: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  creators: [Creator!]!
  genres: [Genre!]!
  stars: [Star!]!
}

type SearchMovie {
  id: ID!
  title: String!
  yearReleased: Int
  posterUrl: String
  posterHeight: Int
  posterWidth: Int
  externalRating: Float
  similarity: Float
}

type PaginatedSearchResult {
  results: [SearchMovie!]!
  totalResults: Int!
}

type PaginatedMoviesResult {
  results: [Movie!]!
  totalResults: Int!
}

type PaginatedRecursiveCommentsResult {
  results: [RecursiveComment!]!
  totalResults: Int!
  movieId: ID!
  parentId: ID
}

type Query {
  getMovies(
    page: Int
    pageSize: Int
    orderBy: String
    orderDirection: String
    genres: [String!]
  ): PaginatedMoviesResult!
  getFeaturedMovies: [Movie!]!
  getMovie(id: ID!): Movie
  randomMovie: Movie!
  getUser(id: ID): User
  searchMovies(query: String!, page: Int, pageSize: Int): PaginatedSearchResult!
  getGenres: [Genre!]!
  getComment(id: ID): RecursiveComment
  getRecursiveComments(
    movieId: ID!
    parentId: ID
    limitAtDepth: Int
    maxDepth: Int
    page: Int
    pageSize: Int
    orderDirection: String
  ): PaginatedRecursiveCommentsResult!
}

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input SignInInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  avatarFile: Upload
}

input CreateCommentInput {
  movieId: ID!
  content: String!
  parentId: ID
}

input UpdateCommentInput {
  content: String!
}

input UpsertCommentVoteInput {
  type: String!
}

type Mutation {
  signUp(input: SignUpInput!): User
  signIn(input: SignInInput!): User
  signOut: Boolean!
  updateUser(input: UpdateUserInput!): User
  createComment(input: CreateCommentInput!): Comment!
  updateComment(id: ID!, input: UpdateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
  upsertCommentVote(commentId: ID!, input: UpsertCommentVoteInput!): CommentVote!
  deleteCommentVote(commentId: ID!): Boolean!
}
