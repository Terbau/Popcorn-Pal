scalar Date
scalar Upload

type User {
  id: ID!
  email: String
  firstName: String
  lastName: String
  avatarUrl: String
  createdAt: Date
  updatedAt: Date
}

type Comment {
  id: ID!
  userId: ID!
  movieId: ID!
  content: String!
  createdAt: Date
  updatedAt: Date
}

type Movie {
  id: ID!
  title: String!
  plot: String
  runtime: Int
  yearReleased: Int
  releasedAt: Date
  certificate: String
  externalRating: Float
  externalMovieMeterRank: Int
  externalVotes: Int
  posterUrl: String
  posterHeight: Int
  posterWidth: Int
  landscapePosterUrl: String
  landscapePosterHeight: Int
  landscapePosterWidth: Int
  showcaseOnHomePage: Boolean
  createdAt: Date
  updatedAt: Date
  creators: [String!]
  genres: [String!]
  stars: [String!]
}

type SearchMovie {
  id: ID!
  title: String!
  yearReleased: Int
  posterUrl: String
  posterHeight: Int
  posterWidth: Int
  externalRating: Float
  similarity: Float
}

type SearchResult {
  movies: [SearchMovie!]
  totalResults: Int
  nextPage: Int
}
type UserMovieData {
  userId: ID
  movieId: ID
  favorite: Boolean
  favoritedAt: Date
}

type Query {
  getMovies(
    page: Int
    pageSize: Int
    orderBy: String
    orderDirection: String
  ): [Movie!]
  getFeaturedMovies: [Movie!]
  getMovie(id: ID!): Movie
  randomMovie: Movie!
  getUser(id: ID): User
  searchMovies(query: String!, page: Int, pageSize: Int): SearchResult!
  getUserMovieData(movieId: ID!): UserMovieData!
}

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input SignInInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  avatarFile: Upload
}

type Mutation {
  signUp(input: SignUpInput!): User
  signIn(input: SignInInput!): User
  signOut: Boolean!
  updateUser(input: UpdateUserInput!): User
  addFavoriteMovie(movieId: ID!): Boolean
  deleteFavoriteMovie(movieId: ID!): Boolean
}

